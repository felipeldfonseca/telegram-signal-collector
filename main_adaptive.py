#!/usr/bin/env python3
"""
Sistema de Trading Adaptativo - Telegram Signal Collector
Implementa o workflow completo de an√°lise hor√°ria e sele√ß√£o autom√°tica de estrat√©gias

Workflow:
1. Conecta ao Telegram e monitora sinais em tempo real
2. A cada hora (ou quando h√° sinais suficientes), analisa condi√ß√µes do mercado
3. Seleciona automaticamente a melhor estrat√©gia baseada na an√°lise:
   - Martingale Premium Conservative (ROI: 56.0%)
   - Infinity Conservative (ROI: 45.1%)
   - Pause (quando condi√ß√µes s√£o desfavor√°veis)
4. Exibe relat√≥rios em tempo real e salva an√°lises
"""

import asyncio
import argparse
import sys
import os
from datetime import datetime

# Adicionar diret√≥rio do projeto ao path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from collector import Config, LiveTrader, AdaptiveStrategy, StrategyType


def print_welcome_banner():
    """Imprime banner de boas-vindas."""
    print("\n" + "üöÄ" + "=" * 78)
    print("SISTEMA DE TRADING ADAPTATIVO - TELEGRAM SIGNAL COLLECTOR")
    print("=" * 80)
    print("üéØ An√°lise inteligente de mercado em tempo real")
    print("üîÑ Sele√ß√£o autom√°tica da melhor estrat√©gia")
    print("üìä Monitoramento 24/7 com relat√≥rios detalhados")
    print("=" * 80)
    print()


def print_strategy_info():
    """Imprime informa√ß√µes das estrat√©gias dispon√≠veis."""
    print("üìã ESTRAT√âGIAS DISPON√çVEIS:")
    print("-" * 40)
    print("üé≤ MARTINGALE PREMIUM CONSERVATIVE")
    print("   ‚Ä¢ ROI: 56.0% mensal")
    print("   ‚Ä¢ Win Rate: 78.7%")
    print("   ‚Ä¢ Risco: $36 por sess√£o")
    print("   ‚Ä¢ Tentativas: At√© G1 (2 tentativas)")
    print()
    print("‚ôæÔ∏è  INFINITY CONSERVATIVE")
    print("   ‚Ä¢ ROI: 45.1% mensal")
    print("   ‚Ä¢ Win Rate: 92.3% (sess√µes)")
    print("   ‚Ä¢ Risco: $49 por sess√£o")
    print("   ‚Ä¢ Tentativas: 7 n√≠veis progressivos")
    print()
    print("‚è∏Ô∏è  PAUSE")
    print("   ‚Ä¢ Ativado quando G2+STOP > 30%")
    print("   ‚Ä¢ Preserva capital em condi√ß√µes ruins")
    print("-" * 40)
    print()


def print_decision_criteria():
    """Imprime crit√©rios de decis√£o."""
    print("üß† CRIT√âRIOS DE DECIS√ÉO AUTOM√ÅTICA:")
    print("-" * 40)
    print("üìä AN√ÅLISE NO FINAL DE CADA HORA (XX:59):")
    print("   ‚Ä¢ Dados completos da hora inteira")
    print("   ‚Ä¢ M√≠nimo 5 opera√ß√µes para an√°lise confi√°vel")
    print("   ‚Ä¢ Taxa de sucesso 1¬™ tentativa")
    print("   ‚Ä¢ Taxa de recupera√ß√£o G1") 
    print("   ‚Ä¢ Taxa de G2+STOP")
    print()
    print("üéØ SELE√á√ÉO DE ESTRAT√âGIA:")
    print("   ‚Ä¢ Se G2+STOP > 30% ‚Üí PAUSE")
    print("   ‚Ä¢ Se G1 recovery > 65% ‚Üí MARTINGALE")
    print("   ‚Ä¢ Se 1¬™ tentativa > 60% ‚Üí INFINITY")
    print("   ‚Ä¢ Confian√ßa m√≠nima: 70%")
    print("-" * 40)
    print()


async def run_live_system():
    """Executa o sistema em tempo real."""
    try:
        # Configurar sistema
        config = Config()
        config.setup_logging()
        
        print_welcome_banner()
        print_strategy_info()
        print_decision_criteria()
        
        # Verificar configura√ß√µes
        print("üîß VERIFICANDO CONFIGURA√á√ïES:")
        print(f"   üì± Telegram API ID: {'‚úÖ Configurado' if config.api_id else '‚ùå N√£o configurado'}")
        print(f"   üîê Telegram API Hash: {'‚úÖ Configurado' if config.api_hash else '‚ùå N√£o configurado'}")
        print(f"   üë• Grupo: {config.group_name if config.group_name else '‚ùå N√£o configurado'}")
        print(f"   üïê Hor√°rio: {config.start_hour}:00 - {config.end_hour}:59")
        print(f"   üåç Timezone: {config.timezone}")
        print()
        
        if not all([config.api_id, config.api_hash, config.group_name]):
            print("‚ùå ERRO: Configura√ß√µes do Telegram n√£o encontradas!")
            print("Configure as vari√°veis de ambiente ou arquivo .env:")
            print("   TG_API_ID=seu_api_id")
            print("   TG_API_HASH=seu_api_hash")
            print("   TG_GROUP=nome_do_grupo")
            return
        
        # Inicializar sistema
        print("üöÄ Iniciando sistema adaptativo...")
        trader = LiveTrader(config)
        
        # Executar sistema
        await trader.start_live_trading()
        
    except KeyboardInterrupt:
        print("\nüõë Sistema interrompido pelo usu√°rio")
    except Exception as e:
        print(f"\n‚ùå Erro fatal: {e}")
        import traceback
        traceback.print_exc()


async def test_analysis_system():
    """Testa o sistema de an√°lise com dados hist√≥ricos."""
    print("üß™ MODO DE TESTE - SISTEMA DE AN√ÅLISE")
    print("=" * 50)
    
    try:
        config = Config()
        adaptive = AdaptiveStrategy(config)
        
        # Simular diferentes cen√°rios
        test_scenarios = [
            {
                'name': 'Cen√°rio Favor√°vel ao Martingale',
                'first_rate': 45.0,
                'g1_rate': 75.0,
                'g2_stop_rate': 15.0,
                'total_ops': 20
            },
            {
                'name': 'Cen√°rio Favor√°vel ao Infinity',
                'first_rate': 70.0,
                'g1_rate': 50.0,
                'g2_stop_rate': 10.0,
                'total_ops': 25
            },
            {
                'name': 'Cen√°rio para Pausar',
                'first_rate': 40.0,
                'g1_rate': 45.0,
                'g2_stop_rate': 35.0,
                'total_ops': 15
            },
            {
                'name': 'Poucos Dados',
                'first_rate': 60.0,
                'g1_rate': 70.0,
                'g2_stop_rate': 20.0,
                'total_ops': 5
            }
        ]
        
        for scenario in test_scenarios:
            print(f"\nüìä {scenario['name']}:")
            print(f"   1¬™ tentativa: {scenario['first_rate']:.1f}%")
            print(f"   G1 recovery: {scenario['g1_rate']:.1f}%")
            print(f"   G2+STOP: {scenario['g2_stop_rate']:.1f}%")
            print(f"   Total ops: {scenario['total_ops']}")
            
            strategy, confidence = adaptive._determine_strategy(
                scenario['total_ops'],
                scenario['first_rate'],
                scenario['g1_rate'],
                scenario['g2_stop_rate']
            )
            
            print(f"   üéØ Estrat√©gia: {strategy.value.upper()}")
            print(f"   üé≤ Confian√ßa: {confidence:.1f}%")
            print("-" * 40)
        
        print("\n‚úÖ Teste do sistema de an√°lise conclu√≠do!")
        
    except Exception as e:
        print(f"‚ùå Erro no teste: {e}")
        import traceback
        traceback.print_exc()


def main():
    """Fun√ß√£o principal."""
    parser = argparse.ArgumentParser(
        description='Sistema de Trading Adaptativo - Telegram Signal Collector',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Exemplos de uso:
  python main_adaptive.py                    # Executar sistema em tempo real
  python main_adaptive.py --test             # Testar sistema de an√°lise
  python main_adaptive.py --help             # Mostrar esta ajuda

Configura√ß√£o necess√°ria (.env):
  TG_API_ID=seu_api_id
  TG_API_HASH=seu_api_hash
  TG_GROUP=nome_do_grupo
        """
    )
    
    parser.add_argument(
        '--test', 
        action='store_true',
        help='Executar em modo de teste (an√°lise de cen√°rios)'
    )
    
    args = parser.parse_args()
    
    if args.test:
        asyncio.run(test_analysis_system())
    else:
        asyncio.run(run_live_system())


if __name__ == "__main__":
    main() 